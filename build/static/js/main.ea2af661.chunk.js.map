{"version":3,"sources":["RPSGame/RPSGame.js","App.js","serviceWorker.js","index.js"],"names":["RPSGame","useState","userSelect","setUserSelect","computerSelect","setComputerSelect","results","setResults","isReload","setIsReload","userCount","setUserCount","computerCount","setComputerCount","useEffect","handleResults","handleSelect","select","randomNumber","min","max","rand","Math","random","floor","randomInteger","toLowerCase","generatedComputerChoice","imageSelect","url","src","alt","num","className","id","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mKAiJeA,MA/If,WAAoB,IAAD,EACqBC,mBAAS,IAD9B,mBACRC,EADQ,KACIC,EADJ,OAE6BF,mBAAS,IAFtC,mBAERG,EAFQ,KAEQC,EAFR,OAGeJ,mBAAS,IAHxB,mBAGRK,EAHQ,KAGCC,EAHD,OAIiBN,oBAAS,GAJ1B,mBAIRO,EAJQ,KAIEC,EAJF,OAKmBR,mBAAS,GAL5B,mBAKRS,EALQ,KAKGC,EALH,OAM2BV,mBAAS,GANpC,mBAMRW,EANQ,KAMOC,EANP,KAQfC,qBAAU,WACNC,MACD,CAACb,IAEJ,IAKMc,EAAe,SAACC,GAClB,IAAIC,EANc,SAACC,EAAKC,GACxB,IAAIC,EAAOF,EAAMG,KAAKC,UAAYH,EAAM,EAAID,GAC5C,OAAOG,KAAKE,MAAMH,GAICI,CAAc,EAAG,GACpCtB,EAAcc,EAAOS,eACrBC,EAAwBT,GACxBT,GAAY,IAGVmB,EAAc,SAACX,GACjB,IAAIY,EAAG,yBAAqBZ,EAArB,cACP,OAAO,yBAAKa,IAAKD,EAAKE,IAAKd,KAGzBU,EAA0B,SAACK,GACjB,IAARA,EACA3B,EAAkB,QACH,IAAR2B,EACP3B,EAAkB,SACH,IAAR2B,GACP3B,EAAkB,aAIpBU,EAAgB,WACK,KAAnBX,GAAwC,KAAfF,IACrBE,IAAmBF,EACnBK,EAAW,mBACe,SAAnBH,GAA4C,UAAfF,GACpCK,EAAW,eACXM,EAAiBD,EAAgB,IACP,SAAnBR,GAA4C,aAAfF,GACpCK,EAAW,YACXI,EAAaD,EAAY,IACC,UAAnBN,GAA6C,SAAfF,GACrCK,EAAW,eACXM,EAAiBD,EAAgB,IAEd,UAAnBR,GACe,aAAfF,GAI0B,aAAnBE,GAAgD,SAAfF,GAFxCK,EAAW,YACXI,EAAaD,EAAY,IAKN,aAAnBN,GACe,UAAfF,IAEAK,EAAW,eACXM,EAAiBD,EAAgB,MAY7C,OACI,yBAAKqB,UAAU,WACX,qDACA,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,4BACX,oCAAUvB,GACV,0BACIuB,UAAU,wBACVC,GAAG,mBAEa,KAAfhC,EAAoB,IAAM0B,EAAY1B,KAI/C,yBAAK+B,UAAU,wBACX,yCAAerB,GACf,0BAAMqB,UAAU,wBAAwBC,GAAG,eACnB,KAAnB9B,EACK,IACAwB,EAAYxB,MAK9B,yBAAK6B,UAAU,UACV3B,GACG,oCACI,sCACA,0BAAM2B,UAAU,gBAAgB3B,KAK5C,yBAAK2B,UAAU,aACTzB,EAsBE,4BAAQyB,UAAU,aAAaE,QA/D1B,WACjB9B,EAAkB,IAClBF,EAAc,IACdI,EAAW,IACXE,GAAY,KA2DA,UArBA,oCACI,4BACIwB,UAAU,MACVE,QAAS,kBAAMnB,EAAa,UAFhC,QAMA,4BACIiB,UAAU,MACVE,QAAS,kBAAMnB,EAAa,WAFhC,SAMA,4BACIiB,UAAU,MACVE,QAAS,kBAAMnB,EAAa,cAFhC,gBCzGToB,MApBf,WACI,OACI,oCACI,gCACI,gDAGJ,8BACI,kBAAC,EAAD,OAGJ,gCACI,uBAAGH,UAAU,aAAb,+DAC8D,Q,KCJ1DI,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZZC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SD0HpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ea2af661.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction RPSGame() {\r\n    const [userSelect, setUserSelect] = useState('');\r\n    const [computerSelect, setComputerSelect] = useState('');\r\n    const [results, setResults] = useState('');\r\n    const [isReload, setIsReload] = useState(false);\r\n    const [userCount, setUserCount] = useState(0);\r\n    const [computerCount, setComputerCount] = useState(0);\r\n\r\n    useEffect(() => {\r\n        handleResults(); // eslint-disable-next-line\r\n    }, [userSelect]);\r\n\r\n    const randomInteger = (min, max) => {\r\n        let rand = min + Math.random() * (max + 1 - min);\r\n        return Math.floor(rand);\r\n    };\r\n\r\n    const handleSelect = (select) => {\r\n        let randomNumber = randomInteger(1, 3);\r\n        setUserSelect(select.toLowerCase());\r\n        generatedComputerChoice(randomNumber);\r\n        setIsReload(true);\r\n    };\r\n\r\n    const imageSelect = (select) => {\r\n        let url = `images/rpsgame/${select}_image.png`;\r\n        return <img src={url} alt={select} />;\r\n    };\r\n\r\n    const generatedComputerChoice = (num) => {\r\n        if (num === 1) {\r\n            setComputerSelect('rock');\r\n        } else if (num === 2) {\r\n            setComputerSelect('paper');\r\n        } else if (num === 3) {\r\n            setComputerSelect('scissors');\r\n        }\r\n    };\r\n\r\n    const handleResults = () => {\r\n        if (computerSelect !== '' && userSelect !== '') {\r\n            if (computerSelect === userSelect) {\r\n                setResults('There was a tie');\r\n            } else if (computerSelect === 'rock' && userSelect === 'paper') {\r\n                setResults('You Lost...');\r\n                setComputerCount(computerCount + 1);\r\n            } else if (computerSelect === 'rock' && userSelect === 'scissors') {\r\n                setResults('You Win!');\r\n                setUserCount(userCount + 1);\r\n            } else if (computerSelect === 'paper' && userSelect === 'rock') {\r\n                setResults('You Lost...');\r\n                setComputerCount(computerCount + 1);\r\n            } else if (\r\n                computerSelect === 'paper' &&\r\n                userSelect === 'scissors'\r\n            ) {\r\n                setResults('You Win!');\r\n                setUserCount(userCount + 1);\r\n            } else if (computerSelect === 'scissors' && userSelect === 'rock') {\r\n                setResults('You Win!');\r\n                setUserCount(userCount + 1);\r\n            } else if (\r\n                computerSelect === 'scissors' &&\r\n                userSelect === 'paper'\r\n            ) {\r\n                setResults('You Lost...');\r\n                setComputerCount(computerCount + 1);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleReload = () => {\r\n        setComputerSelect('');\r\n        setUserSelect('');\r\n        setResults('');\r\n        setIsReload(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"rpsgame\">\r\n            <h3>Rock, Paper, Scissors</h3>\r\n            <div className=\"rpsgame-choice\">\r\n                <div className=\"rpsgame-choice__computer\">\r\n                    <h2>You: {userCount}</h2>\r\n                    <span\r\n                        className=\"rpsgame-choice__image\"\r\n                        id=\"computer-choice\"\r\n                    >\r\n                        {userSelect === '' ? '?' : imageSelect(userSelect)}\r\n                    </span>\r\n                </div>\r\n\r\n                <div className=\"rpsgame-choice__user\">\r\n                    <h2>Computer: {computerCount}</h2>\r\n                    <span className=\"rpsgame-choice__image\" id=\"user-choice\">\r\n                        {computerSelect === ''\r\n                            ? '?'\r\n                            : imageSelect(computerSelect)}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"result\">\r\n                {results && (\r\n                    <>\r\n                        <h2>Result</h2>\r\n                        <span className=\"result__text\">{results}</span>\r\n                    </>\r\n                )}\r\n            </div>\r\n\r\n            <div className=\"btn-group\">\r\n                {!isReload ? (\r\n                    <>\r\n                        <button\r\n                            className=\"btn\"\r\n                            onClick={() => handleSelect('Rock')}\r\n                        >\r\n                            Rock\r\n                        </button>\r\n                        <button\r\n                            className=\"btn\"\r\n                            onClick={() => handleSelect('Paper')}\r\n                        >\r\n                            Paper\r\n                        </button>\r\n                        <button\r\n                            className=\"btn\"\r\n                            onClick={() => handleSelect('Scissors')}\r\n                        >\r\n                            Scissors\r\n                        </button>\r\n                    </>\r\n                ) : (\r\n                    <button className=\"btn reload\" onClick={handleReload}>\r\n                        Reload\r\n                    </button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RPSGame;\r\n","import React from 'react';\r\nimport RPSGame from './RPSGame/RPSGame';\r\n\r\nfunction App() {\r\n    return (\r\n        <>\r\n            <header>\r\n                <h1>Old Super Games</h1>\r\n            </header>\r\n\r\n            <main>\r\n                <RPSGame />\r\n            </main>\r\n\r\n            <footer>\r\n                <p className=\"copyright\">\r\n                    Â© Old Super Games | 2020 | Created by Dmitriy Zatulovskiy{' '}\r\n                </p>\r\n            </footer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n        ),\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null &&\r\n                    contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.',\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './styles/main.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}